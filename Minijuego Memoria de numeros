minijuegoMemoriaNumeros
	"Mini juego de Memorizar secuencia de numeros"

"MEMORIA DE NUMEROS"
| semaforo seg pos nro1 nro2 jugador1 jugador2 Acerto1 Acerto2 cantAcertados1 cantAcertados2 respuesta1 respuesta2 salida |

"alt + .        esto hace que pare la ejecucion"

jugador1 := atacante.
cantAcertados1 := 0.
Acerto1 := false.
nro1 := ((1000000000 to: 9999999999) atRandom) asString. "numero de 10 digitos a memorizar"

jugador2 := defensor.
cantAcertados2 := 0.
Acerto2 := false.
nro2 := ((1000000000 to: 9999999999) atRandom) asString. "numero de 10 digitos a memorizar"

"pos inicializo mas abajo"
seg:= 3.
semaforo := Semaphore new.

Transcript clear.
Transcript show: '---MEMORIA DE NUMEROS---' ; cr.
Transcript show: 'Vas a tener una secuencia de 10 numeros' ; cr.
Transcript show: 'Para memorizar en ', (seg asString) ,' segundos, cada digito en orden' ; cr.
Transcript show: 'El que acierte la secuencia gana, en caso de que ambos acierten: gana el defensor' ; cr.
Transcript show: 'Si no aciertan, el que haya memorizado mayor cantidad de digitos gana' ; cr.
Transcript show: 'En caso de que ambos hayan memorizado la misma cantidad de digitos: gana el defensor' ; cr.
Transcript show: 'La secuencia aparece en la tercera linea, ejemplo:' ; cr.
Transcript show: 'El numero a memorizar es XXXXXXXXXX' ; cr.

UIManager default request: 'Presione enter cuando termine leer'.
Transcript clear.

"JUEGA EL JUGADOR1"
Transcript show: '-Turno ATACANTE-' ; cr.
Transcript show: 'Jugador' , ((jugador1 id) asString) ; cr. "muestra el id"
UIManager default request: 'Estas listo?'.

Transcript show: 'El numero a memorizar es ', nro1 ; cr. "nro ya es un string"
	
World doOneCycle. "fuerza a actualizar el transcript"
(Delay forSeconds: seg) wait.
Transcript clear.

respuesta1 := (UIManager default request: 'Jugador' , ((jugador1 id) asString) , ' - Ingrese resultado final').
self enteroError: respuesta1.

[((respuesta1 asString) size) > 10] whileTrue: [ 
	Transcript show: 'El numero erroneo era ', (respuesta1 asString) ; cr.
	respuesta1 := (UIManager default request: 'Jugador' , ((jugador1 id) asString) , ' - Error, ingrese resultado final de 10 digitos').
	self enteroError: respuesta1.
	].

"JUEGA EL JUGADOR1"
Transcript show: '-Turno DEFENSOR-' ; cr.
Transcript show: 'Jugador' , ((jugador2 id) asString) ; cr.
UIManager default request: 'Estas listo?'.

Transcript show: 'El numero a memorizar es ', nro2 ; cr. "nro ya es un string"
	
World doOneCycle. "fuerza a actualizar el transcript"
(Delay forSeconds: seg) wait.
Transcript clear.

respuesta2 := (UIManager default request: 'Jugador' , ((jugador2 id) asString) , ' - Ingrese resultado final').
self enteroError: respuesta2.

[((respuesta2 asString) size) > 10] whileTrue: [ 
	Transcript show: 'El numero erroneo era ', (respuesta2 asString) ; cr.
	respuesta2 := (UIManager default request: 'Jugador' , ((jugador2 id) asString) , ' - Error, ingrese resultado final de 10 digitos').
	self enteroError: respuesta2.
	].


"CALCULO CANTIDAD DE DIGITOS ACERTADOS"
"JUGADOR1"
pos:= 0.
respuesta1 do: [ :c|
	
	pos:= pos + 1.
	(c = (nro1 at: pos)) ifTrue: [ 
		cantAcertados1 := cantAcertados1 + 1
		].
	
	].

"JUGADOR2"
pos:= 0.
respuesta2 do: [ :c|
	
	pos:= pos + 1.
	(c = (nro2 at: pos)) ifTrue: [ 
		cantAcertados2 := cantAcertados2 + 1
		].
	
	].


"ANALIZO QUIEN GANO"
"Jugador 1"
(cantAcertados1 = (nro1 asInteger)) ifTrue: [ 
	Acerto1 := true.
	].

"Jugador 2"
(respuesta2 = (nro1 asInteger)) ifTrue: [ 
	Acerto2 := true.
	].


"INFORMO"
Transcript show: '-Duelo finalizado-' ; cr.
Transcript cr.

(Acerto1 and: Acerto2) ifTrue: [ 
	
	Transcript show: 'Empate, ambos acertaron la secuencia entonces el ganador es el defensor (ID: ' , ((jugador2 id) asString) , ')' ; cr.
	Transcript show: 'Jugador' , ((jugador2 id) asString) ,  ' - La secuencia a acertar era ', (nro2 asString) ; cr.
	Transcript cr.
	Transcript show: 'Jugador' , ((jugador1 id) asString) ,  ' - La secuencia a acertar era ', (nro1 asString) ; cr.
	salida := defensor.
	
	]

ifFalse: [
	(Acerto1) ifTrue: [
		
		Transcript show: 'Jugador' , ((jugador1 id) asString) ,  ' - Acertó entonces es el ganador' ; cr.
		Transcript show: 'Jugador' , ((jugador1 id) asString) ,  ' - La secuencia a acertar era ', (nro1 asString) ; cr.
		Transcript show: 'Jugador' , ((jugador1 id) asString) ,  ' - La secuencia ingresada fue ', (respuesta1 asString) ; cr.
		Transcript cr.
		Transcript show: 'Jugador' , ((jugador2 id) asString) ,  ' - La secuencia a acertar era ', (nro2 asString) ; cr.
		Transcript show: 'Jugador' , ((jugador2 id) asString) ,  ' - La secuencia ingresada fue ', (respuesta2 asString) ; cr.
		Transcript show: 'Jugador' , ((jugador2 id) asString) ,  ' - Acertó ', (cantAcertados2 asString)  , ' numeros'  ; cr.
		salida := atacante.
		
		]
	ifFalse: [ 
		(Acerto2) ifTrue: [ 
			
			Transcript show: 'Jugador' , ((jugador2 id) asString) ,  ' - Acertó entonces es el ganador' ; cr.
			Transcript show: 'Jugador' , ((jugador2 id) asString) ,  ' - La secuencia a acertar era ', (nro2 asString) ; cr.
			Transcript show: 'Jugador' , ((jugador2 id) asString) ,  ' - La secuencia ingresada fue ', (respuesta2 asString) ; cr.
			Transcript cr.
			Transcript show: 'Jugador' , ((jugador1 id) asString) ,  ' - La secuencia a acertar era ', (nro1 asString) ; cr.
			Transcript show: 'Jugador' , ((jugador1 id) asString) ,  ' - La secuencia ingresada fue ', (respuesta1 asString) ; cr.
			Transcript show: 'Jugador' , ((jugador1 id) asString) ,  ' - Acertó ', (cantAcertados1 asString) , ' digitos' ; cr.
			salida := defensor.
			
			]
		ifFalse: [ 
			"ninguno Acertó, se define por cantidad acertados"
			(cantAcertados1 > cantAcertados2) ifTrue: [ 
				
				Transcript show: 'Jugador' , ((jugador1 id) asString) ,  ' - Tiene mayor cantidad de acertados entonces es el ganador' ; cr.
				Transcript show: 'Jugador' , ((jugador1 id) asString) ,  ' - La secuencia a acertar era ', (nro1 asString) ; cr.
				Transcript show: 'Jugador' , ((jugador1 id) asString) ,  ' - La secuencia ingresada fue ', (respuesta1 asString) ; cr.
				Transcript show: 'Jugador' , ((jugador1 id) asString) ,  ' - Acertó ', (cantAcertados1 asString)  , ' digitos' ; cr.
				Transcript cr.
				Transcript show: 'Jugador' , ((jugador2 id) asString) ,  ' - La secuencia a acertar era ', (nro2 asString) ; cr.
				Transcript show: 'Jugador' , ((jugador2 id) asString) ,  ' - La secuencia ingresada fue ', (respuesta2 asString) ; cr.
				Transcript show: 'Jugador' , ((jugador2 id) asString) ,  ' - Acertó ', (cantAcertados2 asString)  , ' digitos' ; cr.
				salida := atacante.
				
				]
			ifFalse: [ 
				(cantAcertados1 < cantAcertados2) ifTrue: [ 
					
					Transcript show: 'Jugador' , ((jugador2 id) asString) ,  ' - Tiene mayor cantidad de acertados entonces es el ganador' ; cr.
					Transcript show: 'Jugador' , ((jugador2 id) asString) ,  ' - La secuencia a acertar era ', (nro2 asString) ; cr.
					Transcript show: 'Jugador' , ((jugador2 id) asString) ,  ' - La secuencia ingresada fue ', (respuesta2 asString) ; cr.
					Transcript show: 'Jugador' , ((jugador2 id) asString) ,  ' - Acertó ', (cantAcertados2 asString) , ' digitos' ; cr.
					Transcript cr.
					Transcript show: 'Jugador' , ((jugador1 id) asString) ,  ' - La secuencia a acertar era ', (nro1 asString) ; cr.
					Transcript show: 'Jugador' , ((jugador1 id) asString) ,  ' - La secuencia ingresada fue ', (respuesta1 asString) ; cr.
					Transcript show: 'Jugador' , ((jugador1 id) asString) ,  ' - Acertó ', (cantAcertados1 asString) , ' digitos' ; cr.
					salida := defensor.
					
					]
				ifFalse: [ 
					
					"empataron en distancia"
					
					Transcript show: 'Empate, ambos quedaron a la misma distancia. La secuencia entonces el ganador es el defensor (ID: ' , ((jugador2 id) asString) , ')' ; cr.
					Transcript show: 'Jugador' , ((jugador2 id) asString) ,  ' - La secuencia a acertar era ', (nro2 asString) ; cr.
					Transcript show: 'Jugador' , ((jugador2 id) asString) ,  ' - La secuencia ingresada fue ', (respuesta2 asString) ; cr.
					Transcript show: 'Jugador' , ((jugador2 id) asString) ,  ' - Acertó ', (cantAcertados2 asString) , ' digitos' ; cr.
					Transcript cr.
					Transcript show: 'Jugador' , ((jugador1 id) asString) ,  ' - La secuencia a acertar era ', (nro1 asString) ; cr.
					Transcript show: 'Jugador' , ((jugador1 id) asString) ,  ' - La secuencia ingresada fue ', (respuesta1 asString) ; cr.
					Transcript show: 'Jugador' , ((jugador1 id) asString) ,  ' - Acertó ', (cantAcertados1 asString) , ' digitos' ; cr.
					salida := defensor.
					
					].
				
				].
		
			].
		
		].
	
	].

^salida.
