| numRonda opciones ganador codigo1 codigo2 jugador1 jugador2 cantRegular1 cantRegular2 cantAciertos1 cantAciertos2 acerto1 acerto2 rta1 rta2 intentos1 intentos2 numAcertados1 numAcertados2 empate empateTotal |

acerto1 := false.
cantAciertos1 := 0.
cantRegular1 := 0.
jugador1 := 1. "id jugador, borrar"

acerto2 := false.
cantAciertos2 := 0.
cantRegular2 := 0.
jugador2 := 2. "id jugador, borrar"

empate := false.
numRonda:= 0. "partidas parciales"
ganador:= 0. "determina el ganador"
Transcript clear.
Transcript show: '---CODIGO SECRETO---' ; cr.
Transcript show: 'Debera adivinar un numero de 4 digitos' ; cr.
Transcript show: 'El primero que adivina gana' ; cr.
Transcript show: 'Si ambos adivinan a la vez, se volvera a jugar' ; cr.
Transcript cr.
UIManager default request: 'Presione ENTER cuando esté listo'.

"mientras no empaten"
[empate not] whileTrue: [
	
	intentos1:= 0.
	intentos2:= 0.
	numRonda := numRonda + 1.
	"GENERO CODIGO"
   Transcript show: 'Jugador ', (jugador2 asString) , ' ingrese el código que debe adivinar el jugador ', (jugador1 asString) ; cr.
   
	opciones:= (UIManager default chooseFrom: #('Ingresar código por teclado' 'Generar un código random') message: 'SELECCIONE UNA OPCIÓN'  title: 'EL CODIGO SECRETO' ).
	(opciones = 1) ifTrue: [
		
		"falta controlar error con el metodo enteroError"
		codigo1 := (UIManager default requestPassword: 'Ingrese un código de 4 digitos').
		[(codigo1 size) = 4] whileFalse: [
			codigo1 := (UIManager default requestPassword: 'Respete el formato, ingrese un código de 4 digitos')
			]. 
		]
	ifFalse:[
		codigo1 := ((1000 to: 9999) atRandom) asString. 
		].
	
	Transcript show: 'Jugador ', (jugador1 asString) , ' ingrese el código que debe adivinar el jugador ', (jugador2 asString) ; cr.
	opciones := (UIManager default chooseFrom: #('Ingresar código por teclado' 'Generar un código random') message: 'SELECCIONE UNA OPCIÓN'  title: 'EL CODIGO SECRETO' ).
	(opciones = 1) ifTrue: [
		
		"falta controlar error con el metodo enteroError"
		codigo2 := (UIManager default requestPassword: 'Ingrese un código de 4 digitos').
		[(codigo2 size) = 4] whileFalse: [
			codigo2 := (UIManager default requestPassword: 'Respete el formato, ingrese un código de 4 digitos')
			]. 
		]
	ifFalse:[
		codigo2 := ((1000 to: 9999) atRandom) asString. 
		].
	
	
	"AMBOS JUGADORES PASAN A JUGAR"
	[(cantAciertos1 ~= 4) and: (cantAciertos2 ~= 4)] whileTrue: [
		
		cantAciertos1 := 0.
		cantRegular1 := 0.
		cantAciertos2 := 0.
		cantRegular2 := 0.
		
		"JUGADOR 1 JUEGA"
		rta1:= (UIManager default request: 'Turno jugador', (jugador1 asString) ,' - Adivine el codigo').
		intentos1:= intentos1 + 1.
		
		"BIEN(en posicion)"
		1 to: (codigo1 size) do: [ :i |
			
			((codigo1 at: i) = (rta1 at: i)) ifTrue: [ 
				cantAciertos1 := cantAciertos1 + 1.
        		].
	
			].
		
		"REGULAR(esta el numero, no en la posicion)"
		1 to: (codigo1 size) do: [ :i|
			
			"pregunta si esta incluido en el codigo pero no esta en su posicion"
			((codigo1) includes: (rta1 at: i)) ifTrue: [ 
				cantRegular1:= cantRegular1 + 1.
				].
			
			].
		cantRegular1 := cantRegular1 - cantAciertos1.
		(cantRegular1 < 0) ifTrue: [
			cantRegular1 := 0.
			].
		
		
		"JUGADOR 2 JUEGA"
		rta2:= (UIManager default request: 'Turno jugador', (jugador2 asString) ,' - Adivine el codigo').
		intentos2:= intentos2 + 1.
		
		"BIEN(en posicion)"
		1 to: (codigo2 size) do: [ :i |
			
			((codigo2 at: i) = (rta2 at: i)) ifTrue: [ 
				cantAciertos2 := cantAciertos2 + 1.
        		].
	
			].
		
		"REGULAR(esta el codigo, no en la posicion)"
		1 to: (codigo2 size) do: [ :i|
			
			"pregunta si esta incluido en el codigo pero no esta en su posicion"
			((codigo2) includes: (rta2 at: i)) ifTrue: [ 
				cantRegular2:= cantRegular2 + 1.
				].

			].
		cantRegular2 := cantRegular2 - cantAciertos2.
		(cantRegular2 < 0) ifTrue: [
			cantRegular2 := 0.
			].
		
		
		"INFORME PARCIAL DE CUANTOS ACERTARON"
		Transcript cr.
		Transcript show: '-Intento ', (intentos1 asString) , '-' ; cr. "intentos1 va hacer igual que intentos2"
		Transcript show: 'Jugador', (jugador1 asString) , ' ingresó ' , (rta1 asString) ; cr.
 		Transcript show: 'Jugador', (jugador1 asString) , ' acertó ' , (cantAciertos1 asString) , ' en su posicion' ; cr.
		Transcript show: 'Jugador', (jugador1 asString) , ' acertó ' , (cantRegular1 asString) , ' pero no estan en su posicion' ; cr.
		Transcript show: 'Jugador', (jugador2 asString) , ' ingresó ' , (rta2 asString) ; cr.
		Transcript show: 'Jugador', (jugador2 asString) , ' acertó ' , (cantAciertos2 asString) , ' en su posicion' ; cr.
		Transcript show: 'Jugador', (jugador2 asString) , ' acertó ' , (cantRegular2 asString) , ' pero no estan en su posicion' ; cr.
		
		].
	
	"CONTROLO SI HAY UN GANADOR O EMPATE"
	(cantAciertos1 = cantAciertos2) ifTrue: [ 
		"empate"
		empate:= true.
		empateTotal:= true.
		]
	ifFalse: [
		(cantAciertos1 > cantAciertos2) ifTrue: [ 
			"gana el jugador1"
			ganador:= 1.
			empate:= false.
			]
		ifFalse: [ 
			"gana el jugador2"
			ganador:= 2.
			empate:= false.
			].
		
		].
	
	].
"termina si no hay empate"

Transcript cr.
Transcript show: '-Duelo finalizado-'.
Transcript cr.

(ganador = 1) ifTrue: [ 
	
	(empateTotal) ifTrue: [ 
		Transcript show: 'Jugador' , (jugador1 asString) , ' - Es el ganador con desempate en la ronda ', (numRonda asString) , 'y el codigo a adivinar era ', (codigo1 asString) ; cr.
		Transcript show: 'Jugador' , (jugador2 asString) , ' - Perdio y el codigo adivinar era ', (codigo2 asString) ; cr.		
		]
	ifFalse: [ 
		"no hubo empate"
		Transcript show: 'Jugador' , (jugador1 asString) , ' - Es el ganador y el codigo adivinar era ', (codigo1 asString) ; cr.
		Transcript show: 'Jugador' , (jugador1 asString) , ' - Con ', (intentos1 asString) , ' intento/s' ; cr.
		Transcript show: 'Jugador' , (jugador2 asString) , ' - Perdio y el codigo adivinar era ', (codigo2 asString) ; cr.
		].
	
	]

ifFalse: [  
	
	(empateTotal) ifTrue: [ 
		Transcript show: 'Jugador' , (jugador2 asString) , ' - Es el ganador con desempate en la ronda ', (numRonda asString) , ' y el codigo a adivinar era ', (codigo2 asString) ; cr.
		Transcript show: 'Jugador' , (jugador1 asString) , ' - Perdio y el codigo adivinar era ', (codigo1 asString) ; cr.
		]
	ifFalse: [ 
		"no hubo empate"
		Transcript show: 'Jugador' , (jugador2 asString) ,  ' - Es el ganador y el codigo adivinar era ', (codigo2 asString) ; cr.
		Transcript show: 'Jugador' , (jugador2 asString) ,  ' - Con ', (intentos2 asString) , ' intento/s ' ; cr.
		Transcript show: 'Jugador' , (jugador1 asString) ,  ' - Perdio y el codigo adivinar era ', (codigo1 asString) ; cr
		].
	
	].
