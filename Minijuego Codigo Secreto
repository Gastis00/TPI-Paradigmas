minijuegoCodigoSecreto
	"Mini juego de descubrir el código secreto"
	
"NUEVO CODIGO SECRETO"
| digitos n error vecesRepetido listaNum numRonda opciones ganador codigo1 codigo2 jugador1 jugador2 cantRegular1 cantRegular2 cantAciertos1 cantAciertos2 rta1 rta2 intentos1 intentos2 empate empateTotal salida |

cantAciertos1 := 0.
cantRegular1 := 0.
jugador1 := atacante.

cantAciertos2 := 0.
cantRegular2 := 0.
jugador2 := defensor.

empate := true. "empate parcial"
empateTotal := false.
digitos := 4. "cantidad de digitos a adivinar"
numRonda:= 0. "partidas parciales"
ganador:= 0. "determina el ganador"
Transcript clear.
Transcript show: '---CODIGO SECRETO---' ; cr.
Transcript show: 'Debera adivinar un numero de ' , (digitos asString) , ' digitos (sin repetir numero)' ; cr.
Transcript show: 'Por cada intento dira la cantidad de digitos correctos en su posicion y correctos en otra posicion' ; cr.
Transcript show: 'El primero que adivina gana' ; cr.
Transcript show: 'Si ambos adivinan a la vez, se volvera a jugar pero con ' , ((digitos - 1) asString) , ' digitos' ; cr.

UIManager default request: 'Presione ENTER cuando termine de leer'.
Transcript cr.
Transcript show: '-RONDA 1-' ; cr.

"mientras no empaten"
[empate] whileTrue: [
	
	intentos1 := 0.
	codigo1 := ''.
	cantAciertos1 := 0.
	
	intentos2 := 0.
	codigo2 := ''.
	cantAciertos2 := 0.
	
	numRonda := numRonda + 1.
	
	"GENERO CODIGO1"
	opciones := (UIManager default chooseFrom: #('Ingresar código por teclado' 'Generar un código random') message: 'JUGADOR ', ((jugador2 id) asString) ,' SELECCIONE UNA OPCIÓN PARA EL NUMERO A ADIVINAR POR SU RIVAL'  title: 'EL CODIGO SECRETO').
	
	(opciones = 1) ifTrue: [
		
		codigo1 := (UIManager default requestPassword: 'Jugador', ((jugador2 id) asString) , ' - Ingrese un código de ' , (digitos asString), ' digitos a adivinar por el rival').
		
		error:= true. "para que entre obligatoriamente"
		[((codigo1 size) ~= digitos) or: (error)] whileTrue: [
			
			codigo1 do: [ :c| "controla error"
				vecesRepetido := 0.
				"recorro todo el codigo, a ver si no se repite"
				codigo1 do: [ :pos| 
					(c = pos) ifTrue: [ 
						vecesRepetido := vecesRepetido + 1.
						].
					].
				(vecesRepetido > 1) ifTrue: [ 
					error := true. "hay numeros repetidos"
					]
				ifFalse: [
					error:= false. "no hay numeros repetidos"
					].
				
				].
			
			(((codigo1 size) ~= digitos) or: (error)) ifTrue: [ 
				codigo1 := (UIManager default requestPassword: 'Jugador', ((jugador2 id) asString) , ' - Error, ingrese un código de  ' , (digitos asString), ' digitos a adivinar por el rival').
				error:= true. "falta controlar error"
				].
				
			].
		]
	ifFalse: [ 
		"crea la lista de numeros a cargar"
		listaNum:= OrderedCollection new.
		0 to: 9 do: [ :i|
			listaNum add: (i asString) "cargo como string"
			].
		"controla que no se repitan"
		1 to: (digitos) do: [ :c| 
			n := ((listaNum) atRandom).
			listaNum remove: (n).
			codigo1 := (codigo1,n).
			].
		
		listaNum removeAll. "vacia toda la lista"
		
		].
	
	"GENERO CODIGO2"
	opciones := (UIManager default chooseFrom: #('Ingresar código por teclado' 'Generar un código random') message: 'JUGADOR ', ((jugador1 id) asString) ,' SELECCIONE UNA OPCIÓN PARA EL NUMERO A ADIVINAR POR SU RIVAL'  title: 'EL CODIGO SECRETO' ).
	
	(opciones = 1) ifTrue: [
		
		codigo2 := (UIManager default requestPassword: 'Jugador', ((jugador1 id) asString) , ' - Ingrese un código de ', (digitos asString),' digitos a adivinar por el rival').
		
		error := true. "para que entre obligatoriamente"
		[((codigo2 size) ~= digitos) or: (error)] whileTrue: [
			
			codigo2 do: [ :c| "controla error"
				vecesRepetido := 0.
				"recorro todo el codigo, a ver si no se repite"
				codigo2 do: [ :pos| 
					(c = pos) ifTrue: [ 
						vecesRepetido := vecesRepetido + 1.
						].
					].
				(vecesRepetido > 1) ifTrue: [ 
					error := true.
					]
				ifFalse: [
					error:= false.
					].
				
				].
			
			(((codigo2 size) ~= digitos) or: (error)) ifTrue: [ 
				codigo2 := (UIManager default requestPassword: 'Jugador', ((jugador1 id) asString) , ' - Error, ingrese un código de ', (digitos asString),' digitos a adivinar por el rival').
				error:= true. "falta controlar error"
				].

			].
		]
	ifFalse: [ 
		"crea la lista de numeros a cargar"
		listaNum:= OrderedCollection new.
		0 to: 9 do: [ :i|
			listaNum add: (i asString) "cargo como string"
			].
		"controla que no se repitan"
		1 to: (digitos) do: [ :i| 
			n := ((listaNum) atRandom). 
			listaNum remove: (n).
			codigo2 := (codigo2,n).
			].
		
		listaNum removeAll. "vacia toda la lista"
		
		].
	
	"AMBOS JUGADORES PASAN A JUGAR"
	[(cantAciertos1 ~= digitos) and: (cantAciertos2 ~= digitos)] whileTrue: [
		
		cantAciertos1 := 0.
		cantRegular1 := 0.
		cantAciertos2 := 0.
		cantRegular2 := 0.
		
		"JUGADOR 1 JUEGA"
		rta1:= (UIManager default request: 'Jugador', ((jugador1 id) asString) ,' - Adivine el codigo de ', (digitos asString), ' digitos').
		
		error := true. "para que entre obligatoriamente"
		[((rta1 size) ~= digitos) or: (error)] whileTrue: [
			
			rta1 do: [ :c| "controla error"
				vecesRepetido := 0.
				"recorro todo el codigo, a ver si no se repite"
				rta1 do: [ :pos| 
					(c = pos) ifTrue: [ 
						vecesRepetido := vecesRepetido + 1.
						].
					].
				(vecesRepetido > 1) ifTrue: [ 
					error := true.
					]
				ifFalse: [
					error:= false.
					].
				
				].
			
			(((rta1 size) ~= digitos) or: (error)) ifTrue: [ 
				rta1 := (UIManager default request: 'Jugador', ((jugador1 id) asString) , ' - Error, adivine el codigo de ', (digitos asString), ' digitos').
				error:= true. "falta controlar error"
				].
			
			].	

		intentos1:= intentos1 + 1.
		"BIEN(en posicion)"
		1 to: (codigo1 size) do: [ :i |
			
			((codigo1 at: i) = (rta1 at: i)) ifTrue: [ 
				cantAciertos1 := cantAciertos1 + 1.
        		]
			ifFalse: [
				"REGULAR(esta el codigo, no en la posicion)"
				(codigo1 includes: (rta1 at: i)) ifTrue: [ 
					cantRegular1:= cantRegular1 + 1.
					].
				].
	
			].
		
		"JUGADOR 2 JUEGA"
		rta2 := (UIManager default request: 'Jugador', ((jugador2 id) asString) ,' - Adivine el codigo de ', (digitos asString), ' digitos').
		
		error := true. "para que entre obligatoriamente"
		[((rta2 size) ~= digitos) or: (error)] whileTrue: [
			
			rta2 do: [ :c| "controla error"
				vecesRepetido := 0.
				"recorro todo el codigo, a ver si no se repite"
				rta2 do: [ :pos| 
					(c = pos) ifTrue: [ 
						vecesRepetido := vecesRepetido + 1.
						].
					].
				(vecesRepetido > 1) ifTrue: [ 
					error := true.
					]
				ifFalse: [
					error:= false.
					].
				
				].
			
			(((rta2 size) ~= digitos) or: (error)) ifTrue: [ 
				rta2 := (UIManager default request: 'Jugador', ((jugador2 id) asString) , ' - Error, adivine el codigo de ', (digitos asString), ' digitos').
				error:= true. "falta controlar error"
				].
			
			].	
	
		
		intentos2:= intentos2 + 1.
		"BIEN(en posicion)"
		1 to: (codigo2 size) do: [ :i |
			
			((codigo2 at: i) = (rta2 at: i)) ifTrue: [ 
				cantAciertos2 := cantAciertos2 + 1.
        		]
			ifFalse: [
				"REGULAR(esta el codigo, no en la posicion)"
				(codigo2 includes: (rta2 at: i)) ifTrue: [ 
					cantRegular2:= cantRegular2 + 1.
					].
				].
	
			].
		
		
		"INFORME PARCIAL DE CUANTOS ACERTARON"
		Transcript cr.
		Transcript show: '-Intento ', (intentos1 asString) , '-' ; cr. "intentos1 va hacer igual que intentos2"
		Transcript show: 'Jugador', ((jugador1 id) asString) , ' ingresó ' , (rta1 asString) ; cr.
 		Transcript show: 'Jugador', ((jugador1 id) asString) , ' acertó ' , (cantAciertos1 asString) , ' en su posicion' ; cr.
		Transcript show: 'Jugador', ((jugador1 id) asString) , ' acertó ' , (cantRegular1 asString) , ' pero no estan en su posicion' ; cr.
		Transcript cr.
		Transcript show: 'Jugador', ((jugador2 id) asString) , ' ingresó ' , (rta2 asString) ; cr.
		Transcript show: 'Jugador', ((jugador2 id) asString) , ' acertó ' , (cantAciertos2 asString) , ' en su posicion' ; cr.
		Transcript show: 'Jugador', ((jugador2 id) asString) , ' acertó ' , (cantRegular2 asString) , ' pero no estan en su posicion' ; cr.
		
		].
	
	"CONTROLO SI HAY UN GANADOR O EMPATE"
	(cantAciertos1 = cantAciertos2) ifTrue: [ 
		"empate ya esta en verdadero"
		empateTotal := true.
		digitos := 3.
		Transcript cr.
		Transcript cr.
		Transcript show: '-EMPATE RONDA ', (numRonda asString) , '-'; cr.
		Transcript show: 'Jugador' , ((jugador1 id) asString) , ' - El codigo adivinar era ', (codigo1 asString) ; cr.
		Transcript show: 'Jugador' , ((jugador2 id) asString) , ' - El codigo adivinar era ', (codigo2 asString) ; cr.
		Transcript show: 'Se vuelve a jugar' ; cr.
		Transcript show: 'Solamente son 3 digitos a adivinar' ; cr.
		]
	ifFalse: [
		(cantAciertos1 > cantAciertos2) ifTrue: [ 
			"gana el jugador1"
			ganador:= 1.
			empate:= false.
			]
		ifFalse: [ 
			"gana el jugador2"
			ganador:= 2.
			empate:= false.
			].
		
		].
	
	].
"termina si no hay empate"

Transcript cr.
Transcript show: '-Duelo finalizado-'.
Transcript cr.

(ganador = 1) ifTrue: [ 
	
	(empateTotal) ifTrue: [ 
		Transcript show: 'Jugador' , ((jugador1 id) asString) , ' - Es el ganador con desempate en la ronda ', (numRonda asString) , ' y el codigo a adivinar era ', (codigo1 asString) ; cr.
		Transcript show: 'Jugador' , ((jugador2 id) asString) , ' - Perdio y el codigo adivinar era ', (codigo2 asString) ; cr.
		salida := atacante.		
		]
	ifFalse: [ 
		"no hubo empate"
		Transcript show: 'Jugador' , ((jugador1 id) asString) , ' - Es el ganador y el codigo adivinar era ', (codigo1 asString) ; cr.
		Transcript show: 'Jugador' , ((jugador1 id) asString) , ' - Con ', (intentos1 asString) , ' intento/s' ; cr.
		Transcript show: 'Jugador' , ((jugador2 id) asString) , ' - Perdio y el codigo adivinar era ', (codigo2 asString) ; cr.
		salida := atacante.
		].
	
	]

ifFalse: [  
	
	(empateTotal) ifTrue: [ 
		Transcript show: 'Jugador' , ((jugador2 id) asString) , ' - Es el ganador con desempate en la ronda ', (numRonda asString) , ' y el codigo a adivinar era ', (codigo2 asString) ; cr.
		Transcript show: 'Jugador' , ((jugador1 id) asString) , ' - Perdio y el codigo adivinar era ', (codigo1 asString) ; cr.
		salida := defensor.
		]
	ifFalse: [ 
		"no hubo empate"
		Transcript show: 'Jugador' , ((jugador2 id) asString) ,  ' - Es el ganador y el codigo adivinar era ', (codigo2 asString) ; cr.
		Transcript show: 'Jugador' , ((jugador2 id) asString) ,  ' - Con ', (intentos2 asString) , ' intento/s ' ; cr.
		Transcript show: 'Jugador' , ((jugador1 id) asString) ,  ' - Perdio y el codigo adivinar era ', (codigo1 asString) ; cr.
		salida := defensor.
		].
	
	].

^salida.
