minijuegoCarreraDeAnimales
	"Minijuego de Adivinar Numero"
	
| opcionesMostrar cantNum meta espacio1 espacio2 caballo1 caballo2 pos1 pos2 intentos1 intentos2 numAdivinar1 numAdivinar2 jugador1 jugador2 respuesta1 respuesta2 salida |

jugador1 := atacante.
intentos1 := 0. "para mostrar al final nomas"
pos1 := 0. "para controlar si gano"
espacio1:= ''. "posiciones que se mueven en el transcript"

jugador2 := defensor.
intentos2 := 0.
pos2 := 0.
espacio2:= ''. 

meta := 5.
cantNum := 3. "ocpiones para adivinar"
Transcript clear.
Transcript show: '---CARRERA DE ANIMALES---' ; cr.
Transcript show: 'Cada jugador tendra un numero propio para adivinar entre 1 y ' , (cantNum asString), ' para poder avanzar una posicion' ; cr.
Transcript show: 'Gana el primero en llegar a la meta, que esta a ' , (meta asString) , ' posiciones' ; cr.
Transcript show: 'El que acierte podra volver a jugar hasta que erre el numero' ; cr.
Transcript show: 'Por lo tanto no se podra empatar, tendra una ligera por empezar primero el defensor' ; cr.
Transcript cr.
Transcript show: '-ATACANTE-' ; cr.
Transcript show: 'Jugador' , ((jugador1 id) asString) ; cr. "muestra el id"
Transcript show: '-DEFENSOR-' ; cr.
Transcript show: 'Jugador' , ((jugador2 id) asString) ; cr. "muestra el id"
UIManager default request: 'Presione ENTER cuando termine de leer'.

opcionesMostrar := Array new: cantNum.
1 to: (cantNum) do: [ :i|
	opcionesMostrar at: i put: i.
	].

caballo1 := #(
    '>>>>>\.'
    '/_  )`.'
    '/  _)`^)`.'
    '(_,'' \  `^-'''
    '`'''
).
caballo2 := #(
    '<<<<\.'
    '/_  )`.'
    '/  _)`^)`.'
    '(_,'' \  `^-'''
    '`'''
).

[(pos1 ~= meta) and: (pos2 ~= meta)] whileTrue: [ 
	
	"JUEGA EL JUGADOR1"
	respuesta1 := 0. "pongo en 0 para que entre la primera vez"
	numAdivinar1 := 0.
	[respuesta1 = numAdivinar1] whileTrue: [	 
		
		numAdivinar1 := (1 to: 3) atRandom.
		intentos1 := intentos1 + 1.
		"SELECCIONA NUMERO JUGADOR 1"
		respuesta1 := UIManager default chooseFrom: (opcionesMostrar) message: 'El jugador', ((jugador1 id) asString) ,' - Seleccione un numero' title: 'CARRERA DE CABALLOS'.
		[respuesta1 = 0] whileTrue: [  "controla si viene 0 por error"
			respuesta1 := UIManager default chooseFrom: (opcionesMostrar) message: 'El jugador', ((jugador1 id) asString) ,' - Error, seleccione un numero' title: 'CARRERA DE CABALLOS'.
			].
		
		"COMPRUEBA SI AVANZA UNA POSICION"
		(respuesta1 = numAdivinar1) ifTrue: [ 
			pos1 := pos1 + 1.
			espacio1 := (espacio1,'            '). "Agrega espacios para desplazar el caballo"
			
			"ACTUALIZA LA POSICION DE LOS CABALLOS"
			Transcript clear.
			Transcript show: ('1').
			"avanzo el caballo 1"
			caballo1 do: [:linea |
				Transcript show: (espacio1,linea) ; cr.
				].
	
			"se queda quieto"
			Transcript show: ('2').
			caballo2 do: [:linea |
				Transcript show: (espacio2,linea) ; cr.
				].
		
			World doOneCycle. "fuerza a actualizar el transcript"
			UIManager default request: 'continuar'. "aca iria que los jugadores vayan adivinando"
			Transcript clear.
	
			].
		
		].
	intentos1 := intentos1 + 1. "para contar la opcion que erro"
	
	
	"JUEGA EL JUGADOR2"
	respuesta2 := 0. "pongo en 0 para que entre la primera vez"
	numAdivinar2 := 0.
	[respuesta2 = numAdivinar2] whileTrue: [	 
		
		numAdivinar2 := (1 to: 3) atRandom.
		intentos2 := intentos2 + 1.
		"SELECCIONA NUMERO JUGADOR 1"
		respuesta2 := UIManager default chooseFrom: (opcionesMostrar) message: 'El jugador', ((jugador2 id) asString) ,' - Seleccione un numero' title: 'CARRERA DE CABALLOS'.
		[respuesta2 = 0] whileTrue: [  "controla si viene 0 por error"
			respuesta2 := UIManager default chooseFrom: (opcionesMostrar) message: 'El jugador', ((jugador2 id) asString) ,' - Error, seleccione un numero' title: 'CARRERA DE CABALLOS'.
			].
		
		"COMPRUEBA SI AVANZA UNA POSICION"
		(respuesta2 = numAdivinar2) ifTrue: [ 
			pos2 := pos2 + 1.
			espacio2 := (espacio1,'            '). "Agrega espacios para desplazar el caballo"
			
			"ACTUALIZA LA POSICION DE LOS CABALLOS"
			Transcript clear.
			Transcript show: ('1').
			"se queda quieto"
			caballo1 do: [ :linea|
				Transcript show: (espacio1,linea) ; cr.
				].
			
			"avanza el caballo 2"
			Transcript show: ('2').
			caballo2 do: [ :linea|
				Transcript show: (espacio2,linea) ; cr.
				].
		
			World doOneCycle. "fuerza a actualizar el transcript"
			UIManager default request: 'continuar'. "aca iria que los jugadores vayan adivinando"
			Transcript clear.
	
			].
		
		].
	intentos2 := intentos2 + 1. "para contar la opcion que erro"
	
	].


"YA HAY UN GANADOR ENTONCES INFORMO"
Transcript cr.
Transcript show: '-Duelo finalizado-' ; cr.

(pos1 = meta) ifTrue: [ 
	
	Transcript show: 'Jugador' , ((jugador1 id) asString) , ' - Es el ganador de la carrera' ; cr.
	Transcript show: 'Jugador' , ((jugador2 id) asString) , ' - Perdio y quedo en la posicion ', (pos2 asString) ; cr.		
	salida := atacante.
	
	]

ifFalse: [  
	"pos2 = meta"
	Transcript show: 'Jugador' , ((jugador2 id) asString) , ' - Es el ganador de la carrera' ; cr.
	Transcript show: 'Jugador' , ((jugador1 id) asString) , ' - Perdio y quedo en la posicion ', (pos1 asString) ; cr.		
	salida := defensor.
	
	].

^salida.
