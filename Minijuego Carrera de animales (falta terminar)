minijuegoCarreraDeAnimales
	"Minijuego de Adivinar Numero"
	
| conejo pajaro pingüino caballo gato elefante pez perro burro mono opcionesMostrar cantNum meta espacio1 espacio2 animal1 animal2 pos1 pos2 intentos1 intentos2 numAdivinar1 numAdivinar2 jugador1 jugador2 respuesta1 respuesta2 salida |

jugador1 := atacante.
intentos1 := 0. "para mostrar al final nomas"
pos1 := 0. "para controlar si gano"
espacio1:= ''. "posiciones que se mueven en el transcript"

jugador2 := defensor.
intentos2 := 0.
pos2 := 0.
espacio2:= ''. 

meta := 5.
cantNum := 3. "ocpiones para adivinar"
Transcript clear.
Transcript show: '---CARRERA DE ANIMALES---' ; cr.
Transcript show: 'Cada jugador tendra un numero propio para adivinar entre 1 y ' , (cantNum asString), ' para poder avanzar una posicion' ; cr.
Transcript show: 'Gana el primero en llegar a la meta, que esta a ' , (meta asString) , ' posiciones' ; cr.
Transcript show: 'El que acierte podra volver a jugar hasta que erre el numero' ; cr.
Transcript show: 'Por lo tanto no se podra empatar, tendra una ligera ventaja por empezar primero el defensor' ; cr.
Transcript cr.
Transcript show: '-ATACANTE-' ; cr.
Transcript show: 'Jugador' , ((jugador1 id) asString) ; cr. "muestra el id"
Transcript show: '-DEFENSOR-' ; cr.
Transcript show: 'Jugador' , ((jugador2 id) asString) ; cr. "muestra el id"
UIManager default request: 'Presione ENTER cuando termine de leer'.
Transcript clear.

burro := #(
'    >>>>>\.'
'    /_  )`.'
'    /  _)`^)`.'
'    (_,'' \  `^-'''
'    `'''
).
gato := #(
' /\_/\'  
'( o.o )' 
' > ^ <'
).
perro := #(
'  / \__'
' (    @\___'
' /         O'
'/   (_____/'
'/_____/   U'
).
pez := #(
'><(((º>'
).
elefante:= #(
'     _.-- ,.--.'
'   .''   .''     /'
'   | @       |''..--------._'
'  /      \._/              ''.'
' /  .-.-                     \'
'(  /    \                     \'
' \\      ''.                  | #'
'  \\       \   -.           /'
'   :\       |    )._____.''   \'
'            |   /  \  |  \    )'
'            |   |./''  :__ \.-'''
'            ''--'''
).

caballo := #(
'....……./\’,|;\-,.¸ .¸¸ . . . ¸,.,¸.'
'. . . . ¸,’ ¸,. . ¸ `-,”~-~’,¸,.¹-~-._¸,.'
'. . . . ) . ‘”¨ . .):. .`-,;:.`,’;;‘¸,.¹¯¸¸,.-'
'. . .,-’ , , , , ,-‘;:.. . .`-¸;:.`,’–~’`,¯-.,¸_,'
'. . (. ,•¸,-~’¨|;;;::.. .. . “-,;:/,`,-¸,.-~–.¸_'
'. . . ¨`” . . . .|;;;:::.. . .. . ¯¯`*¬~-~~¬¬”~-`'
'. . . . . . . . . .\;;;::… . … , . . . . . .'
).

pingüino := #(
'   .--.'
'  |o_o |'
'  |:_/ |'
' //   \ \'
'(|     | )'
'/''\_   _/`\'
'\___)=(___/'
).

pajaro := #(
'     \\'
'     (o>'
'\\_//)'
' \_/_)'
'  _|_'
).

conejo := #(
'  (\(\  '
' ( -.-)'
' o_(")(")'
).

mono := #(
'             __,__'
'     .--.  .-"     "-.  .--.'
'    / .. \/  .-. .-.  \/ .. \'
'   | |  ''|  /   Y   \  |''  |'
'   | \   \  \ 0 | 0 /  /   /'
'    \ ''- ,\.-""""""""""-./, -'''
'     `''-'' /_   ^ ^   _\ ''-''`'
'         |  \._     _./  |'
'         \   \ ''~''~'' /   /'
'          ''._ ''-.__.-'' _.'''
'             ''""-----""'''
).

opcionesMostrar := #('Burro' 'Gato' 'Perro' 'Pez' 'Elefante' 'Caballo' 'Pingüino' 'Pajaro' 'Conejo' 'Mono').


respuesta1 := UIManager default chooseFrom: (opcionesMostrar) message: 'El jugador', ((jugador1 id) asString) ,' - Seleccione un numero' title: 'CARRERA DE CABALLOS'.
[respuesta1 = 0] whileTrue: [  "controla si viene 0 por error"
	respuesta1 := UIManager default chooseFrom: (opcionesMostrar) message: 'El jugador', ((jugador1 id) asString) ,' - Error, seleccione un numero' title: 'CARRERA DE CABALLOS'.
	].

respuesta1 := {
[1] -> [animal1 := burro].
[2] -> [animal1 := gato].
[3] -> [animal1 := perro].
[4] -> [animal1 := pez].
[5] -> [animal1 := elefante].
[6] -> [animal1 := caballo].
[7] -> [animal1 := pingüino].
[8] -> [animal1 := pajaro].
[9] -> [animal1 := conejo].
[10] -> [animal1 := mono].
}.


respuesta2 := UIManager default chooseFrom: (opcionesMostrar) message: 'El jugador', ((jugador1 id) asString) ,' - Seleccione un numero' title: 'CARRERA DE CABALLOS'.
[respuesta2 = 0] whileTrue: [  "controla si viene 0 por error"
	respuesta2 := UIManager default chooseFrom: (opcionesMostrar) message: 'El jugador', ((jugador1 id) asString) ,' - Error, seleccione un numero' title: 'CARRERA DE CABALLOS'.
	].

respuesta2 := {
[1] -> [animal2 := burro].
[2] -> [animal2 := gato].
[3] -> [animal2 := perro].
[4] -> [animal2 := pez].
[5] -> [animal2 := elefante].
[6] -> [animal2 := caballo].
[7] -> [animal2 := pingüino].
[8] -> [animal2 := pajaro].
[9] -> [animal2 := conejo].
[10] -> [animal2 := mono].
}.

"muestra los animles antes de arrancar"
Transcript show: ('1').
animal1 do: [:linea |
	Transcript show: (espacio1,linea) ; cr.
	].
Transcript show: ('2').
animal2 do: [:linea |
	Transcript show: (espacio2,linea) ; cr.
	].

[(pos1 < meta) and: (pos2 < meta)] whileTrue: [ 

	"JUEGA EL JUGADOR1"
	respuesta1 := 0. "pongo en 0 para que entre la primera vez"
	numAdivinar1 := 0.
	[(respuesta1 = numAdivinar1) and: ((pos1 < meta))] whileTrue: [	 
		
		numAdivinar1 := (1 to: 3) atRandom.
		intentos1 := intentos1 + 1.
		"SELECCIONA NUMERO JUGADOR 1"
		respuesta1 := UIManager default chooseFrom: (opcionesMostrar) message: 'El jugador', ((jugador1 id) asString) ,' - Seleccione un numero' title: 'CARRERA DE CABALLOS'.
		[respuesta1 = 0] whileTrue: [  "controla si viene 0 por error"
			respuesta1 := UIManager default chooseFrom: (opcionesMostrar) message: 'El jugador', ((jugador1 id) asString) ,' - Error, seleccione un numero' title: 'CARRERA DE CABALLOS'.
			].
		
		"COMPRUEBA SI AVANZA UNA POSICION"
		(respuesta1 = numAdivinar1) ifTrue: [ 
			pos1 := pos1 + 1.
			espacio1 := (espacio1,'            '). "Agrega espacios para desplazar el caballo"
			
			"ACTUALIZA LA POSICION DE LOS CABALLOS"
			Transcript clear.
			Transcript show: ('1').
			"avanzo el caballo 1"
			animal1 do: [:linea |
				Transcript show: (espacio1,linea) ; cr.
				].
	
			"se queda quieto"
			Transcript show: ('2').
			animal2 do: [:linea |
				Transcript show: (espacio2,linea) ; cr.
				].
			Transcript cr.
			Transcript show: 'Jugador' , ((jugador1 id) asString) , ' - Acerto el numero ' , (numAdivinar1 asString) , ' avanza una posicion'; cr.
	
			].
	
		].
	Transcript cr.
	Transcript show: 'Jugador' , ((jugador1 id) asString) , ' - Su numero adivinar era ' , (numAdivinar1 asString) ; cr.
	Transcript show: 'Jugador' , ((jugador1 id) asString) , ' - El numero que ingreso es ' , (respuesta1 asString) ; cr.
	intentos1 := intentos1 + 1. "para contar la opcion que erro"

	
	"JUEGA EL JUGADOR2"
	respuesta2 := 0. "pongo en 0 para que entre la primera vez"
	numAdivinar2 := 0.
	"pregunto si no adivino la respuesta1, asi ya termina y no juega el jugador2"
	[((pos1 < meta)) and: ((respuesta2 = numAdivinar2) and: ((pos2 < meta)))] whileTrue: [	 
		
		numAdivinar2 := (1 to: 3) atRandom.
		intentos2 := intentos2 + 1.
		"SELECCIONA NUMERO JUGADOR 1"
		respuesta2 := UIManager default chooseFrom: (opcionesMostrar) message: 'El jugador', ((jugador2 id) asString) ,' - Seleccione un numero' title: 'CARRERA DE CABALLOS'.
		[respuesta2 = 0] whileTrue: [  "controla si viene 0 por error"
			respuesta2 := UIManager default chooseFrom: (opcionesMostrar) message: 'El jugador', ((jugador2 id) asString) ,' - Error, seleccione un numero' title: 'CARRERA DE CABALLOS'.
			].
		
		"COMPRUEBA SI AVANZA UNA POSICION"
		(respuesta2 = numAdivinar2) ifTrue: [ 
			pos2 := pos2 + 1.
			espacio2 := (espacio2,'            '). "Agrega espacios para desplazar el caballo"
			
			"ACTUALIZA LA POSICION DE LOS CABALLOS"
			Transcript clear.
			Transcript show: ('1').
			"se queda quieto"
			animal1 do: [ :linea|
				Transcript show: (espacio1,linea) ; cr.
				].
			
			"avanza el caballo 2"
			Transcript show: ('2').
			animal2 do: [ :linea|
				Transcript show: (espacio2,linea) ; cr.
				].
			Transcript cr.
			Transcript show: 'Jugador' , ((jugador2 id) asString) , ' - Acerto el numero ' , (numAdivinar2 asString) , ' avanza una posicion'; cr.
	
			].
	
		].
	
	(pos1 < meta) ifTrue: [ 
		Transcript cr.
		Transcript show: 'Jugador' , ((jugador2 id) asString) , ' - Su numero adivinar era ' , (numAdivinar2 asString) ; cr.
		Transcript show: 'Jugador' , ((jugador2 id) asString) , ' - El numero que ingreso es ' , (respuesta2 asString) ; cr.
		intentos2 := intentos2 + 1. "para contar la opcion que erro"		
		].

	].


"YA HAY UN GANADOR ENTONCES INFORMO"
Transcript cr.
Transcript show: '-Duelo finalizado-' ; cr.

(pos1 = meta) ifTrue: [ 
	
	Transcript show: 'Jugador' , ((jugador1 id) asString) , ' - Es el ganador de la carrera' ; cr.
	Transcript show: 'Jugador' , ((jugador2 id) asString) , ' - Perdio y quedo en la posicion ', (pos2 asString) ; cr.		
	salida := atacante.
	
	]

ifFalse: [  
	"pos2 = meta"
	Transcript show: 'Jugador' , ((jugador2 id) asString) , ' - Es el ganador de la carrera' ; cr.
	Transcript show: 'Jugador' , ((jugador1 id) asString) , ' - Perdio y quedo en la posicion ', (pos1 asString) ; cr.		
	salida := defensor.
	
	].

^salida.
