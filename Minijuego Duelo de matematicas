minijuegoDueloMatematicas
	"Minijuego del Duelo de Matemáticas"
	
| cantNum seg nro semaforo jugador1 jugador2 acerto1 acerto2 distancia1 distancia2 total1 total2 respuesta1 respuesta2 salida sec1 sec2 |

"alt + .        esto hace que pare la ejecucion"

total1 := 0.
jugador1 := atacante.
acerto1 := false.
sec1 := ''.

total2 := 0.
jugador2 := defensor.
acerto2 := false.
sec2:= ''.

cantNum := 6. "cantidad de numeros que salen"
seg := 0.7. "cada cuanto salen los numeros"
semaforo := Semaphore new.
nro := (-10 to: 10) atRandom. "inicializo"

Transcript clear.
Transcript show: '--- DUELO DE MATEMÁTICAS---' ; cr.
Transcript show: 'Vas a tener ', (cantNum asString), ' numeros para sumar(si son del mismo signo) y restar(de signos opuestos)' ; cr.
Transcript show: 'Los numeros van a ir saliendo en la primera linea cada ' ,(seg asString), ' segundo/s' ; cr.
Transcript show: 'Luego debera escribir el resultado' ; cr.
Transcript show: 'El que acierte su numero gana, en caso de que ambos acierten: gana el defensor' ; cr.
Transcript show: 'Si no aciertan, el que este a menor distancia de su numero gana' ; cr.
Transcript show: 'En caso de que ambos queden a la misma distancia: gana el defensor' ; cr.
Transcript show: 'Este sería un ejemplo, n es la cantidad de números que van y N el número a sumar/restar' ; cr.
Transcript show: 'n) El número a sumar/restar es N' ; cr.

Transcript cr.
Transcript show: '-ATACANTE-' ; cr.
Transcript show: 'Jugador' , ((jugador1 id) asString) ; cr. "muestra el id"
Transcript show: '-DEFENSOR-' ; cr.
Transcript show: 'Jugador' , ((jugador2 id) asString) ; cr. "muestra el id"
UIManager default request: 'Presione ENTER cuando termine de leer'.

"JUEGA EL JUGADOR1"
Transcript clear.
Transcript show: '-Turno Jugador', ((jugador1 id) asString) , '-' ; cr.
UIManager default request: 'Jugador' , ((jugador1 id) asString) , ' - Estas listo?'.
Transcript clear.
1 to: (cantNum) do: [ :i|
	
	"evita que salga un 0"
	[nro = 0] whileTrue: [
		nro := (-10 to: 10) atRandom.
    	].
	
	total1:= total1 + nro. "guardo en la variable a adivinar"
	
	sec1:= (sec1,nro asString,'|').
	
	Transcript show: i asString, ') El numero a sumar/restar es ', (nro asString) ; cr.
	
	World doOneCycle. "fuerza a actualizar el transcript"
	(Delay forSeconds: seg) wait.
	
	Transcript clear.
	nro := 0. "para que vuelva a entrar en el bucle"
	].
respuesta1 := (UIManager default request: 'Ingrese resultado final').
respuesta1 := self enteroError: respuesta1.

"JUEGA EL JUGADOR 2"
Transcript clear.
Transcript show: '-Turno Jugador', ((jugador1 id) asString) ,'-' ; cr.
UIManager default request: 'Jugador' , ((jugador2 id) asString) , ' - Estas listo?'.
Transcript clear.
1 to: cantNum do: [ :i|
	
	"evita que salga un 0"
	[nro = 0] whileTrue: [
		nro := (-10 to: 10) atRandom.
    	].
	
	total2:= total2 + nro. "guardo en la variable a adivinar"
	
	sec2:= (sec2,nro asString, '|').
	
	Transcript show: i asString, ') El numero a sumar/restar es ', (nro asString) ; cr.
	
	World doOneCycle. "fuerza a actualizar el transcript"
	(Delay forSeconds: seg) wait.
	
	Transcript clear.
	nro := 0. "para que vuelva a entrar en el bucle"
	].
respuesta2 := (UIManager default request: 'Ingrese resultado final').
respuesta2 := self enteroError: respuesta2.


"CALCULOS QUIEN ACERTO Y/O DISTANCIAS"

"Jugador 1"
(respuesta1 = total1) ifTrue: [ 
	acerto1 := true.
	]
ifFalse: [ 
	"ANALIZO DISTANCIA QUE QUEDARON DEL NUMERO ADIVINAR"
	((total1 >= 0) and: (respuesta1 >= 0)) ifTrue: [
		distancia1 := (total1 - respuesta1) abs. "abs convierte el numero a positivo"
		]
	ifFalse: [ 
		distancia1 := (total1 - respuesta1) abs. "abs convierte el numero a positivo"
		].
	
	].

"Jugador 2"
(respuesta2 = total2) ifTrue: [ 
	acerto2 := true.
	]
ifFalse: [ 
	"ANALIZO DISTANCIA QUE QUEDARON DEL NUMERO ADIVINAR"
	((total2 >= 0) and: (respuesta2 >= 0)) ifTrue: [
		distancia2 := (total2 - respuesta2) abs. "abs convierte el numero a positivo"
		]
	ifFalse: [ 
		distancia2 := (total2 - respuesta2) abs. "abs convierte el numero a positivo"
		].
	
	].



"INFORMO"
Transcript show: '--- DUELO DE MATEMÁTICAS---' ; cr.
Transcript cr.
Transcript show: '-Duelo finalizado-' ; cr.

(acerto1 and: acerto2) ifTrue: [ 
	
	Transcript show: 'Empate, ambos acertaron el numero entonces el ganador es el defensor: ', (jugador2 id) asString ; cr.
	Transcript show: 'Jugador' , ((jugador2 id) asString) ,  ' - El numero a acertar era ', (total2 asString) ; cr.
	Transcript show: 'Jugador' , ((jugador2 id) asString) ,  ' - El numero que ingreso fue ', (respuesta2 asString) ; cr.
	Transcript show: 'Jugador' , ((jugador2 id) asString) ,  ' - La secuencia era ', sec2 ; cr.
	Transcript cr.
	Transcript show: 'Jugador' , ((jugador1 id) asString) ,  ' - El numero a acertar era ', (total1 asString) ; cr.
	Transcript show: 'Jugador' , ((jugador1 id) asString) ,  ' - El numero que ingreso fue ', (respuesta1 asString) ; cr.
	Transcript show: 'Jugador' , ((jugador1 id) asString) ,  ' - La secuencia era ', sec1 ; cr.
	salida := defensor.
	]

ifFalse: [
	(acerto1) ifTrue: [
		
		Transcript show: 'Jugador' , ((jugador1 id) asString) ,  ' - Acerto entonces es el ganador' ; cr.
		Transcript show: 'Jugador' , ((jugador1 id) asString) ,  ' - El numero a acertar era ', (total1 asString) ; cr.
		Transcript show: 'Jugador' , ((jugador1 id) asString) ,  ' - El numero que ingreso fue ', (respuesta1 asString) ; cr.
		Transcript show: 'Jugador' , ((jugador1 id) asString) ,  ' - La secuencia era ', sec1 ; cr.
		Transcript cr.
		Transcript show: 'Jugador' , ((jugador2 id) asString) ,  ' - El numero a acertar era ', (total2 asString) ; cr.
		Transcript show: 'Jugador' , ((jugador2 id) asString) ,  ' - El numero que ingreso fue ', (respuesta2 asString) ; cr.
		Transcript show: 'Jugador' , ((jugador2 id) asString) ,  ' - La secuencia era ', sec2 ; cr.
		Transcript show: 'Jugador' , ((jugador2 id) asString) ,  ' - Quedo a una distancia de ', (distancia2 asString) ; cr.
		salida := atacante.
		]
	ifFalse: [ 
		(acerto2) ifTrue: [ 
			
			Transcript show: 'Jugador' , ((jugador2 id) asString) ,  ' - Acerto entonces es el ganador' ; cr.
			Transcript show: 'Jugador' , ((jugador2 id) asString) ,  ' - El numero a acertar era ', (total2 asString) ; cr.
			Transcript show: 'Jugador' , ((jugador2 id) asString) ,  ' - El numero que ingreso fue ', (respuesta2 asString) ; cr.
			Transcript show: 'Jugador' , ((jugador2 id) asString) ,  ' - La secuencia era ', sec2 ; cr.
			Transcript cr.
			Transcript show: 'Jugador' , ((jugador1 id) asString) ,  ' - El numero a acertar era ', (total1 asString) ; cr.
			Transcript show: 'Jugador' , ((jugador1 id) asString) ,  ' - El numero que ingreso fue ', (respuesta1 asString) ; cr.
			Transcript show: 'Jugador' , ((jugador1 id) asString) ,  ' - La secuencia era ', sec1 ; cr.
			Transcript show: 'Jugador' , ((jugador1 id) asString) ,  ' - Quedo a una distancia de ', (distancia1 asString) ; cr.
			salida := defensor.
			]
		ifFalse: [ 
			"ninguno acerto, se define por distancia"
			(distancia1 < distancia2) ifTrue: [ 
				
				Transcript show: 'Jugador' , ((jugador1 id) asString) ,  ' - Tiene menor distancia entonces es el ganador' ; cr.
				Transcript show: 'Jugador' , ((jugador1 id) asString) ,  ' - El numero a acertar era ', (total1 asString) ; cr.
				Transcript show: 'Jugador' , ((jugador1 id) asString) ,  ' - El numero que ingreso fue ', (respuesta1 asString) ; cr.
				Transcript show: 'Jugador' , ((jugador1 id) asString) ,  ' - La secuencia era ', sec1 ; cr.
				Transcript show: 'Jugador' , ((jugador1 id) asString) ,  ' - Quedo a una distancia de ', (distancia1 asString) ; cr.
				Transcript cr.
				Transcript show: 'Jugador' , ((jugador2 id) asString) ,  ' - El numero a acertar era ', (total2 asString) ; cr.
				Transcript show: 'Jugador' , ((jugador2 id) asString) ,  ' - El numero que ingreso fue ', (respuesta2 asString) ; cr.
				Transcript show: 'Jugador' , ((jugador2 id) asString) ,  ' - La secuencia era ', sec2 ; cr.
				Transcript show: 'Jugador' , ((jugador2 id) asString) ,  ' - Quedo a una distancia de ', (distancia2 asString) ; cr.
				salida := atacante.
				]
			ifFalse: [ 
				(distancia1 > distancia2) ifTrue: [ 
					
					Transcript show: 'Jugador' , ((jugador2 id) asString) ,  ' - Tiene menor distancia entonces es el ganador' ; cr.
					Transcript show: 'Jugador' , ((jugador2 id) asString) ,  ' - El numero a acertar era ', (total2 asString) ; cr.
					Transcript show: 'Jugador' , ((jugador2 id) asString) ,  ' - El numero que ingreso fue ', (respuesta2 asString) ; cr.
					Transcript show: 'Jugador' , ((jugador2 id) asString) ,  ' - La secuencia era ', sec2 ; cr.
					Transcript show: 'Jugador' , ((jugador2 id) asString) ,  ' - Quedo a una distancia de ', (distancia2 asString) ; cr.
					Transcript cr.
					Transcript show: 'Jugador' , ((jugador1 id) asString) ,  ' - El numero a acertar era ', (total1 asString) ; cr.
					Transcript show: 'Jugador' , ((jugador1 id) asString) ,  ' - El numero que ingreso fue ', (respuesta1 asString) ; cr.
					Transcript show: 'Jugador' , ((jugador1 id) asString) ,  ' - La secuencia era ', sec1 ; cr.
					Transcript show: 'Jugador' , ((jugador1 id) asString) ,  ' - Quedo a una distancia de ', (distancia1 asString) ; cr.
					salida := defensor.
					]
				ifFalse: [ 
					
					"empataron en distancia"
					Transcript show: 'Empate, ambos quedaron a la misma distancia del numero entonces el ganador es el defensor', (jugador2 id) asString ; cr.
					Transcript show: 'Jugador' , ((jugador2 id) asString) ,  ' - El numero a acertar era ', (total2 asString) ; cr.
					Transcript show: 'Jugador' , ((jugador2 id) asString) ,  ' - El numero que ingreso fue ', (respuesta2 asString) ; cr.
					Transcript show: 'Jugador' , ((jugador2 id) asString) ,  ' - La secuencia era ', sec2 ; cr.
					Transcript show: 'Jugador' , ((jugador2 id) asString) ,  ' - Quedo a una distancia de ', (distancia2 asString) ; cr.
					Transcript cr.
					Transcript show: 'Jugador' , ((jugador1 id) asString) ,  ' - El numero a acertar era ', (total1 asString) ; cr.
					Transcript show: 'Jugador' , ((jugador1 id) asString) ,  ' - El numero que ingreso fue ', (respuesta1 asString) ; cr.
					Transcript show: 'Jugador' , ((jugador1 id) asString) ,  ' - La secuencia era ', sec1 ; cr.
					Transcript show: 'Jugador' , ((jugador1 id) asString) ,  ' - Quedo a una distancia de ', (distancia1 asString) ; cr.
					salida := defensor.
					].
				
				].
		
			].
		
		].
	
	].

^salida.
